import { NextResponse } from 'next/server';

export async function POST(request) {
  try {
    const data = await request.json();
    const { severity, title, description, source } = data;

    // Process the vulnerability report
    const report = {
      id: Date.now(),
      severity: parseInt(severity) || 0,
      title: title || 'Vulnerability Report',
      description: description || 'No description provided',
      source: source || 'Unknown',
      timestamp: new Date().toISOString()
    };

    console.log('Vulnerability report received:', report);

    // If severity is high (6+), broadcast as alert
    if (report.severity >= 6) {
      const alertPayload = {
        id: report.id,
        type: 'vulnerability',
        severity: report.severity,
        title: `ðŸš¨ ${report.title}`,
        description: report.description,
        source: report.source,
        timestamp: report.timestamp
      };

      // Get the socket instance
      if (global.io) {
        console.log('Emitting global alert:', alertPayload);
        global.io.emit('global-alert', alertPayload);
        console.log(`High severity alert broadcasted: ${report.title} (${report.severity})`);
      } else {
        console.log('No socket instance found - alert not sent');
      }
    }

    return NextResponse.json({
      success: true,
      message: 'Vulnerability report processed',
      id: report.id,
      alertSent: report.severity >= 6 && !!global.io
    });

  } catch (error) {
    console.error('Error processing vulnerability report:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to process report' },
      { status: 500 }
    );
  }
}